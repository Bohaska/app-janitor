name: Build and Release macOS App

on:
  push:
    branches:
      - main # Or 'master', depending on your default branch
  release:
    types: [created] # This workflow will trigger when a new GitHub Release is created

jobs:
  build-and-release:
    runs-on: macos-latest # Use the latest macOS runner provided by GitHub Actions

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Select Xcode 16.3
      run: sudo xcode-select -s /Applications/Xcode_16.3.app/Contents/Developer

    # If you are building an unsigned app and don't have a certificate yet,
    # you can comment out or remove this step and the related secrets.
    # When you are ready to sign your app, uncomment this step and configure the secrets.
    # - name: Install Apple Certificate and Provisioning Profile
    #   env:
    #     # These environment variables are populated from GitHub Secrets
    #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    #     APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
    #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
    #   run: |
    #     echo "Setting up Apple certificates and provisioning profiles..."
    #     # Create a temporary directory for certificates and profiles if they don't exist
    #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #     CERT_KEYCHAIN_PATH=~/Library/Keychains/login.keychain-db
    #     PROVISION_PROFILE_DIR=~/Library/MobileDevice/Provisioning\ Profiles

    #     # Decode the base64 encoded P12 certificate and import it into the keychain
    #     # The -k flag specifies the keychain, -P the password, and -A allows all applications to access it.
    #     echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > apple_certificate.p12
    #     security import apple_certificate.p12 -k "$CERT_KEYCHAIN_PATH" -P "$P12_PASSWORD" -A
        
    #     # Set the partition list for the imported certificate to allow non-interactive access
    #     # This is crucial for CI/CD environments where user interaction is not possible.
    #     security set-key-partition-list -S apple-tool:,apple: -s -k "$P12_PASSWORD" "$CERT_KEYCHAIN_PATH"

    #     # Remove the temporary P12 file for security
    #     rm apple_certificate.p12

    #     # Decode the base64 encoded provisioning profile and place it in the correct directory
    #     echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > "$PROVISION_PROFILE_DIR/build_profile.mobileprovision"
    #     echo "Certificates and profiles installed."

    - name: Build and Archive macOS App
      run: |
        PROJECT_NAME="appuninstall.xcodeproj"
        SCHEME_NAME="appuninstall"
        ARCHIVE_PATH="build/${SCHEME_NAME}.xcarchive"
        EXPORT_PATH="build/exported_app"
        
        # If building an unsigned app, remove or comment out the CODE_SIGN_IDENTITY,
        # PROVISIONING_PROFILE_SPECIFIER, and DEVELOPMENT_TEAM parameters below.
        # These are only needed for signed builds.
        # CODE_SIGN_IDENTITY_VALUE="Apple Distribution: Your Company Name (XXXXXXXXXX)" # e.g., "Apple Distribution: John Doe (ABCDEF1234)"
        # PROVISIONING_PROFILE_SPECIFIER_VALUE="Your Provisioning Profile Name" # e.g., "MyMacAppDistributionProfile"
        # DEVELOPMENT_TEAM_VALUE="XXXXXXXXXX" # e.g., "ABCDEF1234"

        echo "Cleaning build directory..."
        # Clean the build directory before starting a new build
        rm -rf build

        echo "Archiving the app..."
        # Archive the app using xcodebuild. This creates an .xcarchive bundle.
        # For an unsigned app, ensure your Xcode project's build settings
        # do not require code signing for the Release configuration.
        xcodebuild archive \
          -project "$PROJECT_NAME" \
          -scheme "$SCHEME_NAME" \
          -configuration Release \
          -archivePath "$ARCHIVE_PATH" \
          # CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY_VALUE" \
          # PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER_VALUE" \
          # DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM_VALUE" \
          clean archive

        echo "Exporting the app from the archive..."
        # For an unsigned app, your exportOptions.plist should be very minimal,
        # typically just specifying the method (e.g., 'development' or 'mac-app')
        # without any signing details.
        xcodebuild -exportArchive \
          -archivePath "$ARCHIVE_PATH" \
          -exportPath "$EXPORT_PATH" \
          -exportOptionsPlist exportOptions.plist
        echo "App exported to $EXPORT_PATH"

    - name: Create Release and Upload Asset
      # This step only runs when a new GitHub Release is created
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: softprops/action-gh-release@v1 # Action to create and manage GitHub Releases
      with:
        # The path to your compiled .app bundle. Adjust 'appuninstall.app' if your app has a different name.
        files: build/exported_app/appuninstall.app
        tag_name: ${{ github.ref_name }} # Uses the release tag (e.g., v1.0.0) as the release name
        name: Release ${{ github.ref_name }}
        body: |
          A new release of the macOS app.
          Download the attached `.app` bundle.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions for authentication
