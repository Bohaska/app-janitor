name: Release macOS App

# Controls when the workflow will run
on:
  # Triggers the workflow on pushes to tags that start with 'v' (e.g., v1.0.0, v1.0.1-beta)
  push:
    tags:
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-release:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # IMPORTANT: Permissions required for creating releases and uploading assets.
    # Without this, the workflow will fail when trying to create the release.
    permissions:
      contents: write # To create and upload to a GitHub Release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Selects a specific Xcode version.
      # It's good practice to specify a version for consistency across builds.
      - name: Set up Xcode
        uses: actions/setup-xcode@v2
        with:
          xcode-version: '16.0' # Specify your desired Xcode version, e.g., '15.0'

      # Step 3: Build the macOS application.
      # IMPORTANT:
      # - CODE_SIGN_IDENTITY="", CODE_SIGNING_REQUIRED=NO, CODE_SIGNING_ALLOWED=NO
      #   are used for an unsigned build. For actual distribution, you MUST configure
      #   code signing with certificates/provisioning profiles.
      - name: Build App
        run: |
          xcodebuild clean build \
            -project appuninstall.xcodeproj \
            -scheme appuninstall \
            -configuration Release \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      # Step 4: Zip the .app bundle for distribution.
      # This step assumes a consistent build path.
      # Using 'find' (as in the previous version) can be more robust if the exact
      # path to the .app bundle might vary slightly across Xcode versions or configurations.
      - name: Zip App Bundle
        run: |
          APP_NAME="appuninstall" # Replace with the actual name of your .app bundle
          APP_PATH="build/Build/Products/Release/${APP_NAME}.app"
          ZIP_FILE="${APP_NAME}.zip"

          if [ -d "$APP_PATH" ]; then
            zip -r "$ZIP_FILE" "$APP_PATH"
            echo "APP_ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          else
            echo "Error: App bundle not found at $APP_PATH"
            exit 1
          fi

      # Step 5: Create a GitHub Release.
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically provided
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true # Set to 'false' to publish the release immediately
          prerelease: false

      # Step 6: Upload the zipped app bundle to the newly created release.
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.APP_ZIP_FILE }}
          asset_name: ${{ env.APP_ZIP_FILE }}
          asset_content_type: application/zip
